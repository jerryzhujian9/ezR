% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/frame.R
\name{ez.replace}
\alias{ez.replace}
\title{replace a single value in data frame with another value}
\usage{
ez.replace(df, col, oldval, newval = NULL)
}
\arguments{
\item{df}{data frame}

\item{col}{column name in string (not numbers), can be single, or multiple/vector eg, c('col1','col2'). If skipped (not provided), all columns used}

\item{oldval}{old value (e.g., -Inf, NA), can only be single, not multiple/vector. Note would not differentiate 5.0 and 5}

\item{newval}{new value (e.g., NA), can only be single, not multiple/vector}
}
\value{
returns a new df, old one does not change
}
\description{
replace within one or more than one columns, or entire data frame (ie, all columns)
\cr smilar to \code{\link{ez.recode}} numeric->char, char->char, factor->factor
\cr wrapper of df[[col]][which(df[[col]]==oldval)] <- newval
\cr the "==" syntax within "which()" could be modified 
\cr
\cr when col not provided (see param, note, example below), internally calling dplyr::mutate_all(ifelse()), therefore the change of data type follows mutate()
}
\note{
when 4 parameters provided, it is recognized as (df,col,oldval,newval) 
\cr when 3 parameters provided, it is recognized as (df,oldval,newval) 
see example
}
\examples{
data=data.frame(a=factor(c(1,2)))
ez.replace(data,'a',1,3) \%>\% .$a
ez.replace(data,'a',1,'abc') \%>\% .$a
          # a was factor with level (1,2), now is factor with level (2,3), (2 abc)

data=data.frame(a=c('r1','r2'))
ez.replace(data,'a','r1',3) \%>\% .$a
          # a was factor with level ('r1','r2'), now is factor with level ('3','r2')

data=data.frame(a=c('r1','r2'),stringsAsFactors = F)
ez.replace(data,'a','r1',3) \%>\% .$a
ez.replace(data,'a','r1',NA) \%>\% .$a 
          # a was char, now is still char, (NA counted here as char)

data=data.frame(a=c(1,2))
ez.replace(data,'a',1,111) \%>\% .$a
ez.replace(data,'a',1,NA) \%>\% .$a
          # a was numeric, now is still numeric, (NA counted here as numeric)

ez.replace(data,'a',1,'111') \%>\% .$a
ez.replace(data,'a',1,'abc') \%>\% .$a
          # a was numeric, now is character

data=iris[1:10,]; data[1,2]=NA; data[2,5]=NA; data['TV']='COBY'
ez.replace(data,c('Sepal.Width','Petal.Length','Petal.Width','Species'),NA,3.1415)
ez.replace(data,NA,3.1415)
          # Species was factor, now is numeric (factor->numeric)
ez.replace(data,NA,'replaced')
          # Sepal.Width was numeric, now is char
          # Species was factor, now is char (factor->char of num)
ez.replace(data,5.1,3.14)
          # Sepal.Length was numeric, now is still numeric
ez.replace(data,'COBY','Mac')
          # TV was char, now is still char
}
\seealso{
\code{\link{ez.strreplace}} \code{\link{ez.recode}} \code{\link{ez.recode2}}

Other data.transformation.functions: \code{\link{ez.2character}},
  \code{\link{ez.2factor}}, \code{\link{ez.2label}},
  \code{\link{ez.2long}}, \code{\link{ez.2lower}},
  \code{\link{ez.2value}}, \code{\link{ez.2wide}},
  \code{\link{ez.compute}}, \code{\link{ez.del}},
  \code{\link{ez.label.get}}, \code{\link{ez.label.set}},
  \code{\link{ez.leftjoin}}, \code{\link{ez.move}},
  \code{\link{ez.newcol}}, \code{\link{ez.recode2}},
  \code{\link{ez.recode}}, \code{\link{ez.recols}},
  \code{\link{ez.recol}}, \code{\link{ez.rename}},
  \code{\link{ez.rncols}}, \code{\link{ez.rncol}},
  \code{\link{ez.select}}, \code{\link{ez.sort}},
  \code{\link{ez.split}}, \code{\link{ez.unique}},
  \code{\link{ez.values.get}}, \code{\link{ez.values.set}}
}

