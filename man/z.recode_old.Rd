% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/frame.R
\name{z.recode_old}
\alias{z.recode_old}
\title{recode}
\usage{
z.recode_old(data, recodes)
}
\arguments{
\item{data}{See examples}

\item{recodes}{Definition of the recoding rules. See details}
}
\value{
returns a new df, old one does not change
}
\description{
Recodes a set of variables according to a set of rules.
\cr\cr Recommend to use \code{\link{z.recode}}, syntax more similar to SPSS.
\cr\cr If input a vector, this function also changes the vector to a data frame; z.recode would not.
\cr\cr Similar to z.recode, if multiple ranges overlap, the latter one prevails. 1:3=1;3:5=2 (3->2 finally).
}
\details{
recodes contains a set of recoding rules separated by ";". There are three different types of recoding rules:
\itemize{
 \item{}{The simplest codes one value to another. If we wish to recode 1 into 2, we could use the rule "1->2;".}
 \item{}{A range of values can be coded to a single value using "1:3->4;". This rule would code all values between 1 and 3 inclusive into 4. For factors, a value is between two levels if it is between them in the factor ordering. One sided ranges can be specified using the Lo and Hi key words (e.g."Lo:3->0; 4:Hi->1")}
 \item{}{Default conditions can be coded using "else." For example, if we wish to recode all values >=0 to 1 and all values <0 to missing, we could use ("0:Hi->1; else->NA")}
}
}
\examples{
data<-data.frame(a=rnorm(100),b=rnorm(100),male=rnorm(100)>0)
z.recode_old(data[c("a","b")] , "Lo:0 -> 0;0:Hi -> 1;")
data[c("male")] <- z.recode_old(data[c("male")] , "1 -> 'Male';0 -> 'Female';else -> NA;")
}
\author{
Ian Fellows (pkg Deducer) adapted from code by John Fox (car)
}
\seealso{
\code{\link[tidyr]{gather}}, \code{\link[tidyr]{spread}}, \code{\link[tidyr]{separate}}, \code{\link[tidyr]{unite}}
\cr \code{\link[dplyr]{select}}, \code{\link[dplyr]{slice}}
\cr \code{\link[dplyr]{distinct}}, \code{\link[dplyr]{arrange}}
\cr \code{\link[dplyr]{summarise}}, \code{\link[dplyr]{count}}, \code{\link[dplyr]{mutate}}
\cr \code{\link[dplyr]{group_by}}, \code{\link[dplyr]{left_join}}, \code{\link[dplyr]{right_join}}, \code{\link[dplyr]{inner_join}}, \code{\link[dplyr]{full_join}}, \code{\link[dplyr]{semi_join}}, \code{\link[dplyr]{anti_join}}
\cr \code{\link[dplyr]{intersect}}, \code{\link[dplyr]{union}}, \code{\link[dplyr]{setdiff}}
\cr \code{\link[dplyr]{bind_rows}}, \code{\link[dplyr]{bind_cols}}

Other data.transformation.functions: \code{\link{z.compute}},
  \code{\link{z.delete}}, \code{\link{z.del}},
  \code{\link{z.leftjoin}}, \code{\link{z.move}},
  \code{\link{z.newcol}}, \code{\link{z.recode}},
  \code{\link{z.recols}}, \code{\link{z.recol}},
  \code{\link{z.rename}}, \code{\link{z.rncols}},
  \code{\link{z.rncol}}, \code{\link{z.select}},
  \code{\link{z.sort}}, \code{\link{z.split}},
  \code{\link{z.unique}}
}

